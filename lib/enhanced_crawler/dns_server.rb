# frozen_string_literal: true

require 'set'
require 'fileutils'
require 'timeout'
require 'English' # For $CHILD_STATUS

module EnhancedCrawler
  # Manages dnsmasq lifecycle and /etc/resolv.conf modifications
  class DnsServer
    RESOLV_CONF_PATH = '/etc/resolv.conf'
    DNSMASQ_COMMAND = 'dnsmasq' # Assumes dnsmasq is in PATH

    def initialize(static_temp_dir)
      @static_temp_dir = static_temp_dir
      @hosts_to_map = Set.new
      @dnsmasq_pid = nil
      @dnsmasq_config_path = File.join(@static_temp_dir, 'dnsmasq.conf')
      @original_resolv_content = nil
      @dns_modified = false
      @cleaning_up = false # Prevent recursive cleanup calls
    end

    # Adds a hostname to the set of hosts needing DNS mapping.
    # Ignores localhost and 127.0.0.1.
    def add_host(hostname)
      return if hostname.nil? || hostname.empty? || hostname == 'localhost' || hostname == '127.0.0.1'

      @hosts_to_map.add(hostname)
    end

    # Starts dnsmasq if needed and updates /etc/resolv.conf.
    # Returns true on success or if no hosts needed mapping, false on failure.
    def start!
      return true if @hosts_to_map.empty?

      warn "Starting dnsmasq for hosts: #{@hosts_to_map.to_a.join(', ')}"

      unless _write_dnsmasq_config
        raise EnhancedCrawler::DnsServerError, "Failed to write dnsmasq config."
      end

      unless _spawn_dnsmasq_process
        raise EnhancedCrawler::DnsServerError, "Failed to spawn dnsmasq process."
      end

      # Give dnsmasq a moment to start up before updating resolv.conf
      sleep 0.5

      _update_resolv_conf # Warnings handled within this method
      true # Return true if we reach here without exceptions
    rescue Errno::ENOENT
      raise EnhancedCrawler::DnsServerError, "Error: '#{DNSMASQ_COMMAND}' command not found. Is dnsmasq installed and in PATH?"
    rescue StandardError => e
      @dnsmasq_pid = nil # Ensure PID is nil if start failed
      raise EnhancedCrawler::DnsServerError, "Error starting dnsmasq: #{e.message}"
    end

    # Stops the dnsmasq process if it's running.
    def stop!
      return unless @dnsmasq_pid

      warn "Stopping dnsmasq (PID: #{@dnsmasq_pid})..."
      begin
        Process.kill('TERM', @dnsmasq_pid)
        Timeout.timeout(2) { Process.waitpid(@dnsmasq_pid) }
        warn "dnsmasq stopped."
      rescue Timeout::Error
        warn "dnsmasq (PID: #{@dnsmasq_pid}) did not terminate gracefully. Sending KILL signal."
        Process.kill('KILL', @dnsmasq_pid) rescue Errno::ESRCH # Ignore if already dead
      rescue Errno::ESRCH
        warn "dnsmasq process (PID: #{@dnsmasq_pid}) not found or already stopped."
      rescue StandardError => e
        warn "Error stopping dnsmasq (PID: #{@dnsmasq_pid}): #{e.message}"
      end
      @dnsmasq_pid = nil
    end

    # Restores the original /etc/resolv.conf content if it was modified.
    def restore_resolv_conf!
      return unless @dns_modified && @original_resolv_content

      warn "Restoring original #{RESOLV_CONF_PATH}..."
      begin
        File.write(RESOLV_CONF_PATH, @original_resolv_content)
        @dns_modified = false
        warn "Restored."
      rescue Errno::EACCES
        warn "Error: Permission denied writing to #{RESOLV_CONF_PATH}."
      rescue StandardError => e
        warn "Error restoring #{RESOLV_CONF_PATH}: #{e.message}"
      end
    end

    # Performs cleanup by stopping dnsmasq and restoring resolv.conf.
    def cleanup
      return if @cleaning_up

      @cleaning_up = true
      warn "\nCleaning up DNS..."
      stop!
      restore_resolv_conf!
      warn "DNS cleanup complete."
      @cleaning_up = false
    end

    private

    # Writes the dnsmasq configuration file. Returns true on success.
    def _write_dnsmasq_config
      dnsmasq_config_content = <<~DNSMASQ_CONF
        # Dnsmasq config generated by enhanced-crawler wrapper
        port=53
        listen-address=127.0.0.1
        bind-interfaces
        no-resolv
        no-hosts
        # log-queries # Uncomment for debugging
        # log-facility=- # Log to stderr if needed

        # Custom host mappings
        #{@hosts_to_map.map { |host| "address=/#{host}/127.0.0.1" }.join("\n")}
      DNSMASQ_CONF

      begin
        File.write(@dnsmasq_config_path, dnsmasq_config_content)
        warn "Wrote dnsmasq config to #{@dnsmasq_config_path}"
        true
      rescue StandardError => e
        warn "Error writing dnsmasq config file: #{e.message}"
        false
      end
    end

    # Spawns the dnsmasq process. Returns true on success.
    def _spawn_dnsmasq_process
      cmd = [DNSMASQ_COMMAND, "--conf-file=#{@dnsmasq_config_path}"]
      # Redirect stdout/stderr to /dev/null unless debugging
      options = { out: File::NULL, err: File::NULL }
      @dnsmasq_pid = Process.spawn(*cmd, options)
      Process.detach(@dnsmasq_pid) # Prevent zombie processes
      warn "Spawned dnsmasq with PID: #{@dnsmasq_pid}"
      true
    end

    # Updates /etc/resolv.conf to point to 127.0.0.1 (our dnsmasq).
    def _update_resolv_conf
      warn "Updating #{RESOLV_CONF_PATH} to use local dnsmasq (127.0.0.1)"
      begin
        @original_resolv_content = File.read(RESOLV_CONF_PATH)
        unless @original_resolv_content.strip.start_with?("nameserver 127.0.0.1")
          new_resolv_content = "nameserver 127.0.0.1\n# Prepending local dnsmasq for crawler\n# Original content below:\n" + @original_resolv_content
          File.write(RESOLV_CONF_PATH, new_resolv_content)
          @dns_modified = true
          warn "Prepended 'nameserver 127.0.0.1' to #{RESOLV_CONF_PATH}"
        else
          warn "#{RESOLV_CONF_PATH} already starts with nameserver 127.0.0.1. Skipping modification."
          @dns_modified = false # Not modified by us in this run
        end
      rescue Errno::ENOENT
        warn "Warning: #{RESOLV_CONF_PATH} not found. Cannot update DNS settings."
      rescue Errno::EACCES
        warn "Error: Permission denied writing to #{RESOLV_CONF_PATH}. Root privileges may be required."
      rescue StandardError => e
        warn "Warning: Error updating #{RESOLV_CONF_PATH}: #{e.message}"
      end
    end
  end
end